---
import { getCollection } from "astro:content";
import Layout from "../layouts/Layout.astro";
import { getEntry } from "astro:content";
import FormattedDate from "../components/common/FormattedDate.astro";
import { hoursToHM } from "../utils/time";
import { Icon } from "astro-icon/components";
import LogPage from "../components/log.svelte";
const logs = await getCollection("logs");
const logEntries = await Promise.all(
  logs.map(async (log) => {
    const walk = await getEntry(log.data.walk);
    const weather = await getEntry(log.data.weather);

    return { ...log, data: { ...log.data, walk, weather } };
  })
);

const clientLogs = logEntries.map((l) => ({
  date: l.data.date.toISOString(),
  distance: Number(l.data.walk.data.length),
}));
---

<Layout>
  <!-- <div
    class="pt-6"
    x-data="{tab: 'analytics', range: 'all-time', logs: [],
    get cutoff() {
      const d = new Date();
      d.setFullYear(d.getFullYear() - 1); 
      return d;
    },
    get filtered() { return this.range==='all-time' ? this.logs : this.logs.filter(l => new Date(l.date) >= this.cutoff) },
    get totalDistance() { return this.filtered.reduce((s, l) => s + (Number.isFinite(l.distance) ? l.distance : 0), 0) }
  }"
    x-init="logs = JSON.parse($el.dataset.logs)"
    data-logs={JSON.stringify(clientLogs)}
  >
    <div class="flex justify-between items-center">
      <h1 class="text-2xl font-light mb-2">Log</h1>
      <div class="flex gap-x-4 justify-end">
        <div class="flex p-1 bg-gray-50 rounded-lg gap-x-4">
          <button
            class="rounded-lg px-2 py-1 flex items-center gap-x-2"
            :class="tab=='table' ? 'bg-gray-200': 'bg-gray-100'"
            x-on:click="tab='table'"
          >
            <Icon name="lucide:table" class="size-4" />

            Table</button
          >
          <button
            class="border-l-0 rounded-lg px-2 py-1 flex items-center gap-x-2"
            :class="tab=='analytics' ? 'bg-gray-200': 'bg-gray-100'"
            x-on:click="tab='analytics'"
          >
            <Icon name="lucide:bar-chart-3" class="size-4" />
            Analytics</button
          >
        </div>

        <div class="flex p-1 bg-gray-50 rounded-lg gap-x-4">
          <button
            class="rounded-lg px-2 py-1 flex items-center gap-x-2"
            :class="range=='all-time' ? 'bg-gray-200': 'bg-gray-100'"
            x-on:click="range='all-time'"
          >
            All time</button
          >
          <button
            class="border-l-0 rounded-lg px-2 py-1 flex items-center gap-x-2"
            :class="range=='12-months' ? 'bg-gray-200': 'bg-gray-100'"
            x-on:click="range='12-months'"
          >
            Past 12 months</button
          >
        </div>
      </div>
    </div>
    <div class="overflow-x-auto" x-show="tab=='table'">
      <table class="relative min-w-max w-full divide-y divide-gray-300">
        <thead>
          <tr>
            <th
              scope="col"
              class="py-3.5 pr-3 pl-4 text-left text-sm font-semibold text-gray-900 sm:pl-0"
              >Date</th
            >
            <th
              scope="col"
              class="px-3 py-3.5 text-left text-sm font-semibold text-gray-900"
              >Route</th
            >
            <th
              scope="col"
              class="px-3 py-3.5 text-left text-sm font-semibold text-gray-900"
              >Distance</th
            >
            <th
              scope="col"
              class="px-3 py-3.5 text-left text-sm font-semibold text-gray-900"
              >Duration</th
            >
            <th
              scope="col"
              class="px-3 py-3.5 text-left text-sm font-semibold text-gray-900"
              >Temperature</th
            >
            <th
              scope="col"
              class="px-3 py-3.5 text-left text-sm font-semibold text-gray-900"
              >Weather</th
            >
          </tr>
        </thead>
        <tbody class="divide-y divide-gray-200">
          {
            logEntries
              .sort((a, b) => b.data.date.getTime() - a.data.date.getTime())
              .map((log) => (
                <tr
                  x-show="range === 'all-time' || new Date($el.dataset.date) >= cutoff"
                  data-date={log.data.date.toISOString()}
                >
                  <td class="py-4 pr-3 pl-4 text-sm whitespace-nowrap text-gray-500 sm:pl-0">
                    <FormattedDate date={log.data.date} />
                  </td>
                  <td class="px-3 py-4 text-sm whitespace-nowrap ">
                    <a
                      href={`/walks/${log.data.walk.data.slug}`}
                      class="underline font-medium text-black"
                    >
                      {log.data.walk.data.title}
                    </a>
                  </td>
                  <td class="px-3 py-4 text-sm whitespace-nowrap text-gray-500">
                    {Math.round(log.data.walk.data.length)}km
                  </td>
                  <td class="px-3 py-4 text-sm whitespace-nowrap text-gray-500">
                    {hoursToHM(log.data.duration)}
                  </td>
                  <td class="px-3 py-4 text-sm whitespace-nowrap text-gray-500">
                    {log.data.temperature}â„ƒ
                  </td>
                  <td class="px-3 py-4 text-sm whitespace-nowrap text-gray-500 flex items-center gap-x-2">
                    <img src={log.data.weather.data.image} class="size-8" />{" "}
                    {log.data.weather.data.label}
                  </td>
                </tr>
              ))
          }
        </tbody>
      </table>
    </div>
    <div x-show="tab='analytics'">
      <div x-text="totalDistance.toFixed(1)"></div>
    </div>
  </div> -->

  <LogPage client:only logEntries={logEntries} />
</Layout>
