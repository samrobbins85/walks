---
import { getCollection, getEntries } from "astro:content";
import Layout from "../layouts/Layout.astro";
import Map from "../components/map.astro";
import Tag from "../components/common/tag.astro";
import { Icon } from "astro-icon/components";
import { roundToQuarter } from "../utils/rounding";
import { Image } from "astro:assets";
import "photoswipe/style.css";
import FormattedDate from "../components/common/FormattedDate.astro";

export async function getStaticPaths() {
  const walks = await getCollection("walks");
  const paths = await Promise.all(
    walks.map(async (walk) => {
      const tags = walk.data?.tags ? await getEntries(walk.data.tags) : [];

      const trails = walk.data?.trails
        ? await getEntries(walk.data.trails)
        : [];
      const lastSlashIndex = walk.filePath.lastIndexOf("/");

      const directoryPath = walk.filePath.slice(0, lastSlashIndex);
      const imageMatches = import.meta.glob(
        "/src/data/walks/**/*.{jpg,jpeg,png,gif,webp,avif,svg}",
        {
          eager: true,
        }
      ) as Record<string, { default: ImageMetadata }>;

      const gallery = Object.entries(imageMatches)
        .filter(([path]) => path.includes(directoryPath))
        .filter(([path]) => !path.endsWith("cover.jpg"))
        .map(([path, imageModule]) => ({
          src: imageModule.default,
          filename: path.split("/").pop(),
        }));
      const geojsonMatches = import.meta.glob("/src/data/walks/**/*.json", {
        eager: true,
      }) as Record<string, { default: object }>;

      const geojsonEntry = Object.entries(geojsonMatches).find(([path]) =>
        path.includes(directoryPath)
      );

      const geojsonData: object | null = geojsonEntry
        ? geojsonEntry[1].default
        : null;

      return {
        params: { route: walk.data.slug },
        props: { walk: { ...walk, tags, trails, gallery }, geojsonData },
      };
    })
  );
  return paths;
}
const { walk, geojsonData } = Astro.props;
---

<Layout title={walk.data.title}>
  <div class="pt-6">
    <div class="">
      <div class="flex justify-between gap-4">
        <div class="flex flex-col">
          {
            !!walk.tags.length && (
              <div class="flex gap-2 mb-3">
                {walk.tags.map((tag) => (
                  <Tag className={tag.data.class} id={tag.id}>
                    {tag.data.name}
                  </Tag>
                ))}
              </div>
            )
          }
          <h1 class="text-4xl font-light mb-6">{walk.data.title}</h1>
          {
            !!walk.data.length && (
              <div class="text-slate-500 text-sm flex gap-x-4">
                <div class="flex items-center gap-x-2">
                  <Icon name="lucide:route" class="size-4" />
                  <abbr
                    title={`${(walk.data.length / 1.609).toFixed(1)} miles`}
                    class="distance"
                  >
                    {walk.data.length} km
                  </abbr>
                </div>
                <div class="flex items-center gap-x-2">
                  <Icon name="lucide:trending-up" class="size-4" />
                  {walk.data.elevation} m
                </div>
                <div class="flex items-center gap-x-2">
                  <Icon name="lucide:clock" class="size-4" />
                  {roundToQuarter(walk.data.duration)} h
                </div>
                <div class="flex items-center gap-x-2">
                  <Icon name="lucide:calendar-days" class="size-4" />
                  <FormattedDate date={walk.data.date} />
                </div>
              </div>
            )
          }
        </div>
      </div>
    </div>
  </div>
  <div class="h-[400px] my-6">
    <Map route={geojsonData} />
  </div>
  {
    walk.data.highlights && (
      <div class="grid md:grid-cols-2 gap-4">
        <div>
          <h2 class="text-sm font-medium text-slate-400 uppercase tracking-wider mb-6">
            Highlights
          </h2>
          <div class="flex flex-col gap-y-4">
            {walk.data.highlights.map((item) => (
              <div class="flex items-center gap-x-4">
                <div class="w-10 h-10 rounded-full bg-slate-50 flex items-center justify-center">
                  <Icon name={item.icon} class="size-5 text-slate-500" />
                </div>
                <span class="text-slate-600">{item.name}</span>
              </div>
            ))}
          </div>
        </div>
        {!!walk.trails.length && (
          <div>
            <h2 class="text-sm font-medium text-slate-400 uppercase tracking-wider mb-6">
              Trails
            </h2>
            <div class="flex flex-col gap-y-3">
              {walk.trails.map((trail) => (
                <div class="flex items-center justify-between p-4 bg-slate-50 rounded-lg hover:bg-slate-100 transition-colors group">
                  {trail?.data?.name}
                </div>
              ))}
            </div>
          </div>
        )}
      </div>
    )
  }

  {
    !!walk.gallery?.length && (
      <div>
        <h2 class="text-sm font-medium text-slate-400 uppercase tracking-wider mt-8 mb-4">
          Photos
        </h2>

        <div class="grid grid-cols-2 md:grid-cols-4 gap-4" id="my-gallery">
          {walk.gallery.map((image) => (
            <a
              href={image.src.src}
              data-pswp-width={image.src.width}
              data-pswp-height={image.src.height}
              data-cropped="true"
              target="_blank"
              class="aspect-square"
            >
              <Image
                quality={90}
                src={image.src as ImageMetadata}
                alt=""
                class="h-full w-full rounded-lg object-cover"
              />
            </a>
          ))}
        </div>
      </div>
    )
  }
</Layout>

<script>
  import PhotoSwipeLightbox from "photoswipe/lightbox";
  const lightbox = new PhotoSwipeLightbox({
    gallery: "#my-gallery",
    children: "a",
    pswpModule: () => import("photoswipe"),
    zoom: false,
    padding: { top: 20, bottom: 20, left: 20, right: 20 },
    loop: false,
  });
  lightbox.addFilter("domItemData", (itemData, _element, linkEl) => {
    const imgEl = linkEl.querySelector("img");
    if (imgEl) {
      itemData.src = imgEl.currentSrc || imgEl.src;
      itemData.msrc = imgEl.currentSrc || imgEl.src;
    }
    return itemData;
  });
  lightbox.init();
</script>
