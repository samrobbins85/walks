---
import { getCollection, getEntries, getEntry } from "astro:content";
import Layout from "../../layouts/Layout.astro";
import Map from "../../components/map.astro";
import Tag from "../../components/common/tag.astro";
import { Icon } from "astro-icon/components";
import { roundToQuarter } from "../../utils/rounding";
import "photoswipe/style.css";
import FormattedDate from "../../components/common/FormattedDate.astro";
import getImages from "../../utils/getImages";
import { hoursToHM } from "../../utils/time";

export async function getStaticPaths() {
  const walks = await getCollection("walks");
  const logs = await getCollection("logs");
  const paths = await Promise.all(
    walks.map(async (walk) => {
      const tags = walk.data?.tags ? await getEntries(walk.data.tags) : [];

      const trails = walk.data?.trails
        ? await getEntries(walk.data.trails)
        : [];
      const r2Images = await getImages(walk.data.slug);

      const lastSlashIndex = walk.filePath.lastIndexOf("/");

      const directoryPath = walk.filePath.slice(0, lastSlashIndex);
      const geojsonMatches = import.meta.glob("/src/data/walks/**/*.json", {
        eager: true,
      }) as Record<string, { default: object }>;

      const geojsonEntry = Object.entries(geojsonMatches).find(([path]) =>
        path.includes(directoryPath)
      );

      const geojsonData: object | null = geojsonEntry
        ? geojsonEntry[1].default
        : null;
      const relatedLogs = await Promise.all(
        logs
          .filter((log) => log.data.walk.id === walk.id)
          .map(async (log) => {
            const weather = await getEntry(log.data.weather);
            return { ...log, data: { ...log.data, weather } };
          })
      );

      return {
        params: { route: walk.data.slug },
        props: {
          walk: { ...walk, tags, trails, r2Images, relatedLogs },
          geojsonData,
        },
      };
    })
  );
  return paths;
}
const { walk, geojsonData } = Astro.props;
---

<Layout title={walk.data.title}>
  <div class="pt-6">
    <div class="">
      <div class="flex justify-between gap-4">
        <div class="flex flex-col">
          {
            !!walk.tags.length && (
              <div class="flex gap-2 mb-3">
                {walk.tags.map((tag) => (
                  <Tag className={tag.data.class} id={tag.id}>
                    {tag.data.name}
                  </Tag>
                ))}
              </div>
            )
          }
          <h1 class="text-4xl font-light mb-6">{walk.data.title}</h1>

          <div class="text-slate-500 text-sm flex gap-x-4">
            <div class="flex items-center gap-x-2">
              <Icon name="lucide:route" class="size-4" />
              <abbr
                title={`${(walk.data.length / 1.609).toFixed(1)} miles`}
                class="distance"
              >
                {walk.data.length} km
              </abbr>
            </div>
            <div class="flex items-center gap-x-2">
              <Icon name="lucide:trending-up" class="size-4" />
              {walk.data.elevation} m
            </div>
            <div class="flex items-center gap-x-2">
              <Icon name="lucide:clock" class="size-4" />
              {roundToQuarter(walk.data.duration)} h
            </div>
            <div class="flex items-center gap-x-2">
              <Icon name="lucide:calendar-days" class="size-4" />
              <FormattedDate date={walk.data.date} />
            </div>
          </div>
        </div>
      </div>
    </div>
  </div>
  <div class="h-[400px] my-6">
    <Map route={geojsonData} />
  </div>
  {
    walk.data.highlights && (
      <div class="grid md:grid-cols-2 gap-4">
        <div>
          <h2 class="text-sm font-medium text-slate-400 uppercase tracking-wider mb-6">
            Highlights
          </h2>
          <div class="flex flex-col gap-y-4">
            {walk.data.highlights.map((item) => (
              <div class="flex items-center gap-x-4">
                <div class="w-10 h-10 rounded-full bg-slate-50 flex items-center justify-center">
                  <Icon
                    name={item.icon}
                    class="size-5 text-slate-500 highlight-icon"
                  />
                </div>
                <span class="text-slate-600">{item.name}</span>
              </div>
            ))}
          </div>
        </div>
        {!!walk.trails.length && (
          <div>
            <h2 class="text-sm font-medium text-slate-400 uppercase tracking-wider mb-6">
              Trails
            </h2>
            <div class="flex flex-col gap-y-3">
              {walk.trails.map((trail) => (
                <a
                  href={`/trails/${trail.id}`}
                  class="flex items-center justify-between p-4 bg-slate-50 rounded-lg hover:bg-slate-100 transition-colors group"
                >
                  <span>{trail?.data?.name}</span>
                  <Icon name="lucide:move-right" />
                </a>
              ))}
            </div>
          </div>
        )}
      </div>
    )
  }

  {
    !!walk.r2Images?.length && (
      <div>
        <h2 class="text-sm font-medium text-slate-400 uppercase tracking-wider mt-8 mb-4">
          Photos
        </h2>

        <div class="grid grid-cols-2 md:grid-cols-4 gap-4" id="my-gallery">
          {walk.r2Images.map((image) => (
            <a
              href={image.src}
              data-pswp-width={image.width}
              data-pswp-height={image.height}
              data-cropped="true"
              target="_blank"
              class="aspect-square"
            >
              <img
                src={image.src}
                alt=""
                class="h-full w-full rounded-lg object-cover"
              />
            </a>
          ))}
        </div>
      </div>
    )
  }
  <h2 class="text-sm font-medium text-slate-400 uppercase tracking-wider mt-8">
    Logs
  </h2>
  <div class="overflow-x-auto">
    <table class="relative min-w-max w-full divide-y divide-gray-300">
      <thead>
        <tr>
          <th
            scope="col"
            class="py-3.5 pr-3 pl-4 text-left text-sm font-semibold text-gray-900 sm:pl-0"
            >Date</th
          >
          <th
            scope="col"
            class="px-3 py-3.5 text-left text-sm font-semibold text-gray-900"
            >Duration</th
          >
          <th
            scope="col"
            class="px-3 py-3.5 text-left text-sm font-semibold text-gray-900"
            >Temperature</th
          >
          <th scope="col" class="px-3 py-3.5 text-left text-sm text-gray-900"
            >Weather</th
          >
        </tr>
      </thead>
      <tbody class="divide-y divide-gray-200">
        {
          walk.relatedLogs
            .sort((a, b) => b.data.date.getTime() - a.data.date.getTime())
            .map((log) => (
              <tr>
                <td class="py-4 pr-3 pl-4 text-sm whitespace-nowrap text-gray-500 sm:pl-0">
                  <FormattedDate date={log.data.date} />
                </td>

                <td class="px-3 py-4 text-sm whitespace-nowrap text-gray-500">
                  {hoursToHM(log.data.duration)}
                </td>
                <td class="px-3 py-4 text-sm whitespace-nowrap text-gray-500">
                  {log.data.temperature}â„ƒ
                </td>
                <td class="px-3 py-4 text-sm whitespace-nowrap text-gray-500 flex items-center gap-x-2">
                  <img src={log.data.weather.data.image} class="size-8" />{" "}
                  {log.data.weather.data.label}
                </td>
              </tr>
            ))
        }
      </tbody>
    </table>
  </div>
</Layout>

<script>
  import PhotoSwipeLightbox from "photoswipe/lightbox";
  const lightbox = new PhotoSwipeLightbox({
    gallery: "#my-gallery",
    children: "a",
    pswpModule: () => import("photoswipe"),
    zoom: false,
    padding: { top: 20, bottom: 20, left: 20, right: 20 },
    loop: false,
  });
  lightbox.addFilter("domItemData", (itemData, _element, linkEl) => {
    const imgEl = linkEl.querySelector("img");
    if (imgEl) {
      itemData.src = imgEl.currentSrc || imgEl.src;
      itemData.msrc = imgEl.currentSrc || imgEl.src;
    }
    return itemData;
  });
  lightbox.init();
</script>
